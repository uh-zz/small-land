<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Oss on small land</title><link>https://uh-zz.github.io/tags/oss/</link><description>Recent content in Oss on small land</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 05 Aug 2020 18:07:06 +0900</lastBuildDate><atom:link href="https://uh-zz.github.io/tags/oss/index.xml" rel="self" type="application/rss+xml"/><item><title>Semantic Versioning</title><link>https://uh-zz.github.io/posts/category/oss/2020/08/semantic-versioning/</link><pubDate>Wed, 05 Aug 2020 18:07:06 +0900</pubDate><guid>https://uh-zz.github.io/posts/category/oss/2020/08/semantic-versioning/</guid><description>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>バックエンドエンジニアの&lt;a href="https://github.com/kamranahmedse/developer-roadmap#back-end-roadmap" target="_blank" rel="noopener">ロードマップ&lt;/a>に沿ってエンジニアとしての自己肯定感を養うシリーズです。&lt;/p>
&lt;h2 id="セマンティックバージョニング">セマンティックバージョニング？&lt;/h2>
&lt;p>アプリに振るバージョン番号を&lt;a href="https://semver.org/lang/ja/" target="_blank" rel="noopener">SemVer&lt;/a>というルールに従って付与しましょうというものです。&lt;/p>
&lt;p>確かにバージョン番号に意味を持たせることで、ユーザからもアプリのバージョン番号が上がればバグ修正なのか機能追加なのかわかりますし、プログラムからも互換性を考慮して処理を分けることができるのでよいですね。&lt;/p>
&lt;h2 id="これだけ覚えておけば-ok">これだけ覚えておけば OK&lt;/h2>
&lt;p>バージョン番号の形式は、&lt;code>メジャー.マイナー.パッチ&lt;/code>です。(例：&lt;code>1.0.0&lt;/code>)&lt;/p>
&lt;h4 id="メジャー">メジャー&lt;/h4>
&lt;ul>
&lt;li>後方互換性がない変更があった時にはこの番号を上げなければいけません(MUST)&lt;/li>
&lt;li>この番号を上げた際には、マイナー/パッチの番号は 0 にリセットしなければいけません(MUST)&lt;/li>
&lt;li>この番号が「0」の場合は初期開発用として扱います。リリースの段階でこの番号を「1」に上げます。&lt;/li>
&lt;/ul>
&lt;h4 id="マイナー">マイナー&lt;/h4>
&lt;ul>
&lt;li>後方互換性を保ちつつ、機能追加のある時にはこの番号を上げなければいけません(MUST)&lt;/li>
&lt;li>この番号を上げた際には、パッチの番号は 0 にリセットしなければいけません(MUST)&lt;/li>
&lt;/ul>
&lt;h4 id="パッチ">パッチ&lt;/h4>
&lt;ul>
&lt;li>後方互換性を保ちつつ、バグ修正のある時にはこの番号を上げなければいけません(MUST)&lt;/li>
&lt;/ul>
&lt;p>※バグ修正とは間違った振る舞いを修正する内部の変更のことをいいます。&lt;/p>
&lt;h2 id="ちょっと踏み込むと">ちょっと踏み込むと&lt;/h2>
&lt;ul>
&lt;li>プレリリースバージョンには、パッチ番号の後ろにハイフンで区切って識別子をつけることができます。&lt;/li>
&lt;/ul>
&lt;p>(例：&lt;code>1.1.0-alpha / 1.1.0-beta / 1.1.0-rc&lt;/code>)
※ちなみに識別子の&lt;code>rc&lt;/code>は「release candidate」の略でベータ版よりもさらに製品版に近い品質のバージョンにつけるそうです。（略を初めて知りました。）&lt;/p>
&lt;ul>
&lt;li>あと npm の packagge.json でもモジュールをセマンティックバージョンで管理してます。（&lt;code>~&lt;/code>や&lt;code>^&lt;/code>が付与されているのをよく見ると思います。）&lt;/li>
&lt;/ul>
&lt;p>これについては&lt;a href="https://qiita.com/takayukioda/items/cb55d3f433af611295a5" target="_blank" rel="noopener">上、真ん中、下で覚えるバージョニング範囲指定&lt;/a>がわかりやすかったので共有しておきます。&lt;/p>
&lt;h2 id="余談">余談&lt;/h2>
&lt;p>たかがバージョニング、されどバージョニングといった感じでした。知ってて損はないですよね。&lt;/p>
&lt;h2 id="備考">備考&lt;/h2>
&lt;p>表紙イラスト：&lt;a href="https://loosedrawing.com/" target="_blank" rel="noopener">Loose Drawing&lt;/a>&lt;/p></description></item></channel></rss>